"combinators:
- (and-then <tactic>+) executes the given tactics sequentially.
- (or-else <tactic>+) tries the given tactics in sequence until one of them succeeds (i.e., the first that doesn't fail).
- (par-or <tactic>+) executes the given tactics in parallel until one of them succeeds (i.e., the first that doesn't fail).
- (par-then <tactic1> <tactic2>) executes tactic1 and then tactic2 to every subgoal produced by tactic1. All subgoals are processed in parallel.
- (try-for <tactic> <num>) executes the given tactic for at most <num> milliseconds, it fails if the execution takes more than <num> milliseconds.
- (if <probe> <tactic> <tactic>) if <probe> evaluates to true, then execute the first tactic. Otherwise execute the second.
- (when <probe> <tactic>) shorthand for (if <probe> <tactic> skip).
- (fail-if <probe>) fail if <probe> evaluates to true.
- (using-params <tactic> <attribute>*) executes the given tactic using the given attributes, where <attribute> ::= <keyword> <value>. ! is a syntax sugar for using-params.
builtin tactics:
- ackermannize_bv A tactic for performing full Ackermannization on bv instances.
- subpaving tactic for testing subpaving module.
- horn apply tactic for horn clauses.
- horn-simplify simplify horn clauses.
- nlsat (try to) solve goal using a nonlinear arithmetic solver.
- qfnra-nlsat builtin strategy for solving QF_NRA problems using only nlsat.
- qe-light apply light-weight quantifier elimination.
- nlqsat apply a NL-QSAT solver.
- qe apply quantifier elimination.
- qsat apply a QSAT solver.
- qe2 apply a QSAT based quantifier elimination.
- qe_rec apply a QSAT based quantifier elimination recursively.
- psat (try to) solve goal using a parallel SAT solver.
- sat (try to) solve goal using a SAT solver.
- sat-preprocess Apply SAT solver preprocessing procedures (bounded resolution, Boolean constant propagation, 2-SAT, subsumption, subsumption resolution).
- ctx-solver-simplify apply solver-based contextual simplification rules.
- psmt builtin strategy for SMT tactic in parallel.
- unit-subsume-simplify unit subsumption simplification.
- aig simplify Boolean structure using AIGs.
- add-bounds add bounds to unbounded variables (under approximation).
- card2bv convert pseudo-boolean constraints to bit-vectors.
- degree-shift try to reduce degree of polynomials (remark: :mul2power simplification is automatically applied).
- diff-neq specialized solver for integer arithmetic problems that contain only atoms of the form (<= k x) (<= x k) and (not (= (- x y) k)), where x and y are constants and k is a numeral, and all constants are bounded.
- eq2bv convert integer variables used as finite domain elements to bit-vectors.
- factor polynomial factorization.
- fix-dl-var if goal is in the difference logic fragment, then fix the variable with the most number of occurrences at 0.
- fm eliminate variables using fourier-motzkin elimination.
- lia2card introduce cardinality constraints from 0-1 integer.
- lia2pb convert bounded integer variables into a sequence of 0-1 variables.
- nla2bv convert a nonlinear arithmetic problem into a bit-vector problem, in most cases the resultant goal is an under approximation and is useul for finding models.
- normalize-bounds replace a variable x with lower bound k <= x with x' = x - k.
- pb2bv convert pseudo-boolean constraints to bit-vectors.
- propagate-ineqs propagate ineqs/bounds, remove subsumed inequalities.
- purify-arith eliminate unnecessary operators: -, /, div, mod, rem, is-int, to-int, ^, root-objects.
- recover-01 recover 0-1 variables hidden as Boolean variables.
- bit-blast reduce bit-vector expressions into SAT.
- bv1-blast reduce bit-vector expressions into bit-vectors of size 1 (notes: only equality, extract and concat are supported).
- bv_bound_chk attempts to detect inconsistencies of bounds on bv expressions.
- propagate-bv-bounds propagate bit-vector bounds by simplifying implied or contradictory bounds.
- propagate-bv-bounds2 propagate bit-vector bounds by simplifying implied or contradictory bounds.
- reduce-bv-size try to reduce bit-vector sizes using inequalities.
- bv-slice simplify using bit-vector slices.
- bvarray2uf Rewrite bit-vector arrays into bit-vector (uninterpreted) functions.
- dt2bv eliminate finite domain data-types. Replace by bit-vectors.
- elim-small-bv eliminate small, quantified bit-vectors by expansion.
- max-bv-sharing use heuristics to maximize the sharing of bit-vector expressions such as adders and multipliers.
- blast-term-ite blast term if-then-else by hoisting them.
- cofactor-term-ite eliminate term if-the-else using cofactors.
- collect-statistics Collects various statistics.
- ctx-simplify apply contextual simplification rules.
- demodulator extracts equalities from quantifiers and applies them to simplify.
- der destructive equality resolution.
- distribute-forall distribute forall over conjunctions.
- dom-simplify apply dominator simplification rules.
- elim-term-ite eliminate term if-then-else by adding fresh auxiliary declarations.
- elim-uncnstr2 eliminate unconstrained variables.
- elim-uncnstr eliminate application containing unconstrained variables.
- elim-predicates eliminate predicates, macros and implicit definitions.
- injectivity Identifies and applies injectivity axioms.
- snf put goal in skolem normal form.
- nnf put goal in negation normal form.
- occf put goal in one constraint per clause normal form (notes: fails if proof generation is enabled; only clauses are considered).
- pb-preprocess pre-process pseudo-Boolean constraints a la Davis Putnam.
- propagate-values2 propagate constants.
- propagate-values propagate constants.
- reduce-args reduce the number of arguments of function applications, when for all occurrences of a function f the i-th is a value.
- reduce-args2 reduce the number of arguments of function applications, when for all occurrences of a function f the i-th is a value.
- simplify apply simplification rules.
- elim-and convert (and a b) into (not (or (not a) (not b))).
- solve-eqs solve for variables.
- special-relations detect and replace by special relations.
- split-clause split a clause in many subgoals.
- symmetry-reduce apply symmetry reduction.
- tseitin-cnf convert goal into CNF using tseitin-like encoding (note: quantifiers are ignored).
- tseitin-cnf-core convert goal into CNF using tseitin-like encoding (note: quantifiers are ignored). This tactic does not apply required simplifications to the input goal like the tseitin-cnf tactic.
- qffd builtin strategy for solving QF_FD problems.
- pqffd builtin strategy for solving QF_FD problems in parallel.
- smtfd builtin strategy for solving SMT problems by reduction to FD.
- fpa2bv convert floating point numbers to bit-vectors.
- qffp (try to) solve goal using the tactic for QF_FP.
- qffpbv (try to) solve goal using the tactic for QF_FPBV (floats+bit-vectors).
- qffplra (try to) solve goal using the tactic for QF_FPLRA.
- default default strategy used when no logic is specified.
- euf-completion simplify using equalities.
- solver-subsumption remove assertions that are subsumed.
- qfbv-sls (try to) solve using stochastic local search for QF_BV.
- sls-smt (try to) solve SMT formulas using local search.
- nra builtin strategy for solving NRA problems.
- qfaufbv builtin strategy for solving QF_AUFBV problems.
- qfauflia builtin strategy for solving QF_AUFLIA problems.
- qfbv builtin strategy for solving QF_BV problems.
- qfidl builtin strategy for solving QF_IDL problems.
- qflia builtin strategy for solving QF_LIA problems.
- qflra builtin strategy for solving QF_LRA problems.
- qfnia builtin strategy for solving QF_NIA problems.
- qfnra builtin strategy for solving QF_NRA problems.
- qfuf builtin strategy for solving QF_UF problems.
- qfufbv builtin strategy for solving QF_UFBV problems.
- qfufbv_ackr A tactic for solving QF_UFBV based on Ackermannization.
- ufnia builtin strategy for solving UFNIA problems.
- uflra builtin strategy for solving UFLRA problems.
- auflia builtin strategy for solving AUFLIA problems.
- auflira builtin strategy for solving AUFLIRA problems.
- aufnira builtin strategy for solving AUFNIRA problems.
- lra builtin strategy for solving LRA problems.
- lia builtin strategy for solving LIA problems.
- lira builtin strategy for solving LIRA problems.
- smt apply a SAT based SMT solver.
- skip do nothing tactic.
- fail always fail tactic.
- fail-if-undecided fail if goal is undecided.
- macro-finder Identifies and applies macros.
- quasi-macros Identifies and applies quasi-macros.
- ufbv-rewriter Applies UFBV-specific rewriting rules, mainly demodulation.
- bv builtin strategy for solving BV problems (with quantifiers).
- ufbv builtin strategy for solving UFBV problems (with quantifiers).
builtin probes:
- ackr-bound-probe A probe to give an upper bound of Ackermann congruence lemmas that a formula might generate.
- is-unbounded true if the goal contains integer/real constants that do not have lower/upper bounds.
- is-pb true if the goal is a pseudo-boolean problem.
- arith-max-deg max polynomial total degree of an arithmetic atom.
- arith-avg-deg avg polynomial total degree of an arithmetic atom.
- arith-max-bw max coefficient bit width.
- arith-avg-bw avg coefficient bit width.
- is-qflia true if the goal is in QF_LIA.
- is-qfauflia true if the goal is in QF_AUFLIA.
- is-qflra true if the goal is in QF_LRA.
- is-qflira true if the goal is in QF_LIRA.
- is-ilp true if the goal is ILP.
- is-qfnia true if the goal is in QF_NIA (quantifier-free nonlinear integer arithmetic).
- is-qfnra true if the goal is in QF_NRA (quantifier-free nonlinear real arithmetic).
- is-nia true if the goal is in NIA (nonlinear integer arithmetic, formula may have quantifiers).
- is-nra true if the goal is in NRA (nonlinear real arithmetic, formula may have quantifiers).
- is-nira true if the goal is in NIRA (nonlinear integer and real arithmetic, formula may have quantifiers).
- is-lia true if the goal is in LIA (linear integer arithmetic, formula may have quantifiers).
- is-lra true if the goal is in LRA (linear real arithmetic, formula may have quantifiers).
- is-lira true if the goal is in LIRA (linear integer and real arithmetic, formula may have quantifiers).
- is-qfufnra true if the goal is QF_UFNRA (quantifier-free nonlinear real arithmetic with other theories).
- is-qfbv-eq true if the goal is in a fragment of QF_BV which uses only =, extract, concat.
- is-qffp true if the goal is in QF_FP (floats).
- is-qffpbv true if the goal is in QF_FPBV (floats+bit-vectors).
- is-qffplra true if the goal is in QF_FPLRA.
- memory amount of used memory in megabytes.
- depth depth of the input goal.
- size number of assertions in the given goal.
- num-exprs number of expressions/terms in the given goal.
- num-consts number of non Boolean constants in the given goal.
- num-bool-consts number of Boolean constants in the given goal.
- num-arith-consts number of arithmetic constants in the given goal.
- num-bv-consts number of bit-vector constants in the given goal.
- produce-proofs true if proof generation is enabled for the given goal.
- produce-model true if model generation is enabled for the given goal.
- produce-unsat-cores true if unsat-core generation is enabled for the given goal.
- has-quantifiers true if the goal contains quantifiers.
- has-patterns true if the goal contains quantifiers with patterns.
- is-propositional true if the goal is in propositional logic.
- is-qfbv true if the goal is in QF_BV.
- is-qfaufbv true if the goal is in QF_AUFBV.
- is-quasi-pb true if the goal is quasi-pb.
"
